# COPY-PASTED FOR NOW
@panel_width_minus_10 = 530			# used to be 450
@panel_width = 540  				# used to be 460
@panel_width_half = 270				# used to be 230
@panel_width_plus_10 = 550  		# used to be 470
@panel_width_plus_14 = 554			# used to be 474
@panel_width_plus_14_half = 277		# used to be 237
@panel_width_plus_20 = 560			# used to be 480
@panel_width_plus_30 = 570			# used to be 490
@panel_width_plus_70 = 610			# used to be 530

types cpm_politics_government_types  {

	type cpm_ig_header = flowcontainer {
		direction = vertical

		margin_top = 5
		margin_bottom = 10
		#parentanchor = hcenter
		#direction = vertical
		minimumsize = { 540 -1 }
		#spacing = 10
		using = main_bg

		background = {
			texture = "gfx/interface/illustrations/government/government_illustration.dds"
			alpha = 0.2
			fittype = center
			using = frame_small_mask

			modify_texture = {
				texture = "gfx/interface/masks/fade_horizontal_center.dds"
				spriteType = Corneredstretched
				spriteborder = { 0 0 }
				blend_mode = alphamultiply
			}
		}

		widget = {
			size = { 540 215 }



			vbox = {
				margin_top = 3

				#margin_left = 10
				#margin_right = 10

				layoutpolicy_horizontal = fixed
				layoutpolicy_vertical = fixed

				spacing = 5

				textbox = {
					#visible = no
					parentanchor = left
					autoresize = yes
					text = "COUNTRY_GOVERNMENT_NO_LINE_BREAK"
					align = nobaseline
					elide = right
					using = fontsize_xl
				}

				hbox = {
					#spacing = 5
					visible = yes
					layoutpolicy_horizontal = preferred
					layoutpolicy_vertical = fixed
					parentanchor = left

					widget = {
						layoutpolicy_horizontal = shrinking
						size = { 10 10 }
					}

					vbox = {
						name = "government"
						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = expanding
						spacing = 2

						widget = {
							layoutpolicy_horizontal = expanding
							size = { 30 26 }
							background = {
								using = dark_area
								alpha = 0.35

							}

							hbox = {
								layoutpolicy_horizontal = expanding
								spacing = 5
								margin = { 5 0 }

								icon = {
									texture = "gfx/interface/icons/generic_icons/in_government_icon.dds"
									size = { 22 22 }
									tooltip = "[concept_in_government]"
								}
								textbox = {
									layoutpolicy_horizontal = expanding
									text = "GOVERNMENT"
									align = left|nobaseline
									elide = right
									default_format = "#title"
								}
							}

						}

						hbox = {
							name = "government_igs"
							layoutpolicy_horizontal = expanding
							layoutpolicy_vertical = fixed
							hbox = {
								name = "government_parties"
								#visible = no
								#visible = "[Not(IsDataModelEmpty(Country.GetPartiesInGovernment))]"
								parentanchor = left
								datamodel = "[Country.AccessInterestGroupsInGovernment]"
								item = {
									testwidg = {}
								}
							}
							hbox = {
								layoutpolicy_vertical = expanding
								name = "government_independents"
								#visible = no
								parentanchor = left
								datamodel = "[Country.GetIndependentInterestGroupsInGovernment]"
								item = {
									cpm_ig_widget_independant = {}
								}
							}
							widget = {
								layoutpolicy_horizontal = expanding
								size = {0 0}
							}
						}
					}



					widget = {
						#visible = no
						visible = "[Not(IsDataModelEmpty(Country.AccessInterestGroupsInOpposition))]"
						size = { 10 10 }

						layoutpolicy_horizontal = shrinking
						layoutpolicy_vertical = expanding

						icon = {
							parentanchor = center
							size = { 2 100% }
							texture = "gfx/interface/dividers/divider_clean_vertical.dds"
							texture_density = 2
							alpha = 0.7

							modify_texture = {
								texture = "gfx/interface/masks/fade_vertical_center.dds"
								spriteType = Corneredstretched
								spriteborder = { 0 0 }
								blend_mode = alphamultiply
								alpha = 0.6
							}
						}
					}



					vbox = {
						visible = "[Not(IsDataModelEmpty(Country.AccessInterestGroupsInOpposition))]"
						layoutpolicy_horizontal = growing
						layoutpolicy_vertical = expanding
						spacing = 2

						widget = {
							layoutpolicy_horizontal = growing
							size = { 115 26 }
							background = {
								using = dark_area
								alpha = 0.35

							}

							hbox = {
								layoutpolicy_horizontal = expanding
								spacing = 5
								margin = { 5 0 }
								icon = {
									texture = "gfx/interface/icons/generic_icons/in_opposition_icon.dds"
									size = { 22 22 }
									tooltip = "[concept_in_opposition]"
								}
								textbox = {
									layoutpolicy_horizontal = expanding
									text = "OPPOSITION"
									align = left|nobaseline
									elide = right
									default_format = "#title"
								}
							}

						}

						hbox = {
							name = "opposition_igs"
							layoutpolicy_horizontal = expanding
							hbox = {
								name = "opposition_parties"
								#visible = "[Not(IsDataModelEmpty(Country.GetPartiesInOpposition))]"
								parentanchor = left
								datamodel = "[Country.AccessInterestGroupsInOpposition]"
								#flipdirection = yes

								item = {
									testwidg = {}
								}
							}

							hbox = {
								name = "opposition_independant"
								#visible = no
								layoutpolicy_vertical = expanding
								parentanchor = left
								datamodel = "[Country.GetIndependentInterestGroupsInOpposition]"
								#flipdirection = yes
								item = {
									cpm_ig_widget_independant = {}
								}
							}
							widget = {
								layoutpolicy_horizontal = expanding
								size = {0 0}
							}
						}

					}

					widget = {
						layoutpolicy_horizontal = shrinking
						size = { 10 10 }
					}

				}


				expand = {}

			}




		}
	}


	type testwidg = vbox {

		visible = "[And(InterestGroup.HasParty, EqualTo_string(InterestGroup.GetParty.GetLeader.GetNameNoFormatting, InterestGroup.GetNameNoFormatting))]"

		layoutpolicy_horizontal = fixed
		layoutpolicy_vertical = fixed

		datacontext = "[InterestGroup.GetParty]"


		hbox = {
			#background = {
			#	using = dark_area
			#
			background = {
				texture = "gfx/interface/tooltip/tooltip_title_bg.dds"
				color = "[Party.GetColor]"
				alpha = 0.6
			}
			background = {
				texture = "gfx/interface/tooltip/tooltip_title_bg.dds"
				color = "[Party.GetColor]"
				mirror = horizontal
				alpha = 0.2
			}

			background = {
				using = simple_frame
				margin_bottom = 20
			}
			layoutpolicy_horizontal = expanding
			spacing = 5
			margin_top = 1
			margin_left = 5
			margin_right = 5
			widget = {
				size = { 22 25 }
				icon = {
					parentanchor = center
					tooltipwidget = {
						FancyTooltip_Party = {}
					}
					texture = "[Party.GetIcon]"
					size = { 22 22 }
				}
			}

			textbox = {
				visible = "[GreaterThan_int32(GetDataModelSize(Party.GetMembers),'(int32)1')]"
				size = { -1 25 }
				layoutpolicy_horizontal = expanding
				text = "[Party.GetName]"
				align = left|nobaseline
				elide = right
				fontsize_min = 14
			}
			widget = {
				layoutpolicy_horizontal = growing
				size = { -1 25 }
			}
		}


		dynamicgridbox = {
			layoutpolicy_horizontal = fixed
			layoutpolicy_vertical = fixed
			datamodel = "[Country.AccessAllInterestGroups]"
			flipdirection  = yes
			item = {
				cpm_ig_header_widget2 = {
					visible = "[And(StringIsEmpty(InterestGroup.GetWillJoinPartyDesc),EqualTo_string(InterestGroup.GetParty.GetNameNoFormatting, Party.GetNameNoFormatting))]"
				}
			}
		}


	}

	type cpm_ig_widget_independant = vbox {
		layoutpolicy_vertical = expanding
		widget = {
			size = { 5 5 }
			layoutpolicy_vertical = expanding
		}
		cpm_ig_header_widget2 = { }
	}

	type cpm_ig_header_widget2 = widget {
		size = { 65 125 }

		background = {
			texture = "gfx/interface/backgrounds/gradient_overlay.dds"
			spriteType = Corneredstretched
			spriteborder = { 0 0 }
			alpha = 0

			modify_texture = {
				texture = "gfx/interface/backgrounds/simple_frame_mask.dds"
				spriteType = Corneredstretched
				spriteborder = { 20 20 }
				texture_density = 2
				blend_mode = alphamultiply
			}

		}

		button = {
			size = { 100% 100% }

			block "onclick" {
				onclick = "[InformationPanelBar.OpenInterestGroupPanel(InterestGroup.AccessSelf)]"
			}

			tooltipwidget = {
				FancyTooltip_IG = {}
			}


			using = cpm_ig_widget_button
			texture = "gfx/interface/buttons/white_button_bg.dds"

			blockoverride "bevel_texture" {
				texture = "gfx/interface/buttons/red_button_bevel.dds"
			}

			block "frame_visible" {}


			alpha = 1

			color = "[InterestGroup.GetColor]"

			modify_texture = {
				texture = "gfx/interface/textures/velvet_texture.dds"
				spriteType = Corneredstretched
				spriteborder = { 0 0 }
				alpha = 0.8
				blend_mode = add
			}

			modify_texture = {
				texture = "gfx/interface/backgrounds/gradient_overlay.dds"
				spriteType = Corneredstretched
				spriteborder = { 0 0 }
				alpha = 0.7
				blend_mode = multiply
			}

			modify_texture = {
				texture = "gfx/interface/masks/fade_vertical_bottom.dds"
				spriteType = Corneredstretched
				spriteborder = { 0 0 }
				blend_mode = alphamultiply
				alpha = 0.5
			}



			#background = {
				#visible = "[InterestGroup.IsInGovernment]"
				#texture = "gfx/interface/backgrounds/entry_bg_top_mask.dds"
				#spriteType = Corneredtiled
				#spriteborder = { 12 12 }
				#texture_density = 2
				#alpha = 0.7



				#texture = "gfx/interface/tooltip/tooltip_title_bg.dds"
				#alpha = "[Min_float(Multiply_float(FixedPointToFloat(InterestGroup.GetClout),'(float)2'),'(float)0.4')]"
				#modify_texture = {
				#	texture = "gfx/interface/backgrounds/gradient_overlay.dds"
				#	spriteType = Corneredstretched
				#	spriteborder = { 0 0 }
				#	alpha = 0
				#	blend_mode = multiply
				#}



				#modify_texture = {
				#	texture = "gfx/interface/textures/velvet_texture.dds"
				#	spriteType = Corneredtiled
				#	texture_density = 1
				#	spriteborder = { 0 0 }
				#	blend_mode = overlay
				#	alpha = 1
				#}


				#modify_texture = {
				#	texture = "gfx/interface/masks/fade_vertical_bottom.dds"
				#	spriteType = Corneredstretched
				#	spriteborder = { 0 0 }
				#	blend_mode = alphamultiply
				#	alpha = 0.5
				#}
			#}






			icon = {
				size = { 65 65 }
				texture = "[InterestGroup.GetTexture]"
				parentanchor = bottom
				alpha = 0.25
			}

			widget = {
				size = { 65 32 }
				scissor = yes
				visible = "[InterestGroup.IsPowerful]"

				parentanchor = bottom
				icon = {
					parentanchor = hcenter|bottom
					position = { 0 -2 }
					size = { 61 61 }
					texture = "gfx/interface/icons/ig_icons/influential_ig_frame.dds"
					alwaystransparent = yes
				}
			}

			widget = {
				size = { 65 32 }
				scissor = yes
				visible = "[InterestGroup.IsPowerful]"

				icon = {
					parentanchor = hcenter|top
					position = { 0 2 }
					size = { 61 61 }
					texture = "gfx/interface/icons/ig_icons/influential_ig_frame.dds"
					alwaystransparent = yes
				}
			}




		}

		widget = {
			size = { 100% 100% }
			background = {
				using = simple_frame
			}
		}


		flowcontainer = {
			parentanchor = center
			direction = vertical
			#tooltip = "CLOUT_PIECHART"

			widget = {
				size = { 70 50 }
				datacontext = "[InterestGroup.AccessLeader]"

				character_portrait_base_head = {


					size = { 66 66 }
					blockoverride "portrait_size" {
						size = { 66 75 }
					}
					position = { 2 -14 }

					blockoverride "frame_texture_generated" {
						texture = "gfx/interface/portraits/portrait_frame_head_small.dds"
					}
					blockoverride "frame_texture_historical" {
						texture = "gfx/interface/portraits/portrait_frame_head_small_historical.dds"
					}


					blockoverride "portrait_button_onrightclick" {}
					#blockoverride "tooltip" {}
					blockoverride "rank_icon" {}
					blockoverride "portrait_icons" {}
					blockoverride "show_hat" {}


					#character_ig_icon = {
					#	parentanchor = bottom|right
					#	size = { 30 30 }
					#	blockoverride "tooltip" {}
					#}
				}
				icon = {
					parentanchor = bottom|right
					size = { 28 28 }
					position = { -4 4 }
					datacontext = "[Character.GetIdeology]"
					texture = "[Ideology.GetTexture]"
					tooltipwidget = {
						FancyTooltip_Ideology = {}
					}
				}

			}

			widget = {
				size = { 5 5 }
			}

			#clout
			textbox = {

				background = {
					using = blurry_dark_background
					margin = { 10 5 }
					alpha = 0.4
				}

				background = {
					visible = no
					using = dark_area
					margin_top = -3
					margin_bottom = 3
					alpha = 0.4

					modify_texture = {
						texture = "gfx/interface/masks/fade_horizontal_center.dds"
						spriteType = Corneredstretched
						spriteborder = { 0 0 }
						blend_mode = alphamultiply
						alpha = 1
					}

					modify_texture = {
						texture = "gfx/interface/masks/fade_vertical_center.dds"
						spriteType = Corneredstretched
						spriteborder = { 0 0 }
						blend_mode = alphamultiply
						alpha = 1
					}
				}

				margin_left = 5
				#visible = "[InterestGroup.IsPowerful]"
				text = "[InterestGroup.GetClout|%1v]"
				align = nobaseline
				autoresize = yes
				parentanchor = hcenter
			}

			#approval
			textbox = {
				background = {
					using = blurry_dark_background
					margin = { 10 5 }
					alpha = 0.4
				}

				tooltip = "IG_APPROVAL_BREAKDOWN"
				margin_right = 5
				visible = "[GreaterThanOrEqualTo_int32(InterestGroup.GetApprovalValue,'(int32)5')]"
				text = "[InterestGroup.GetApprovalValue|=p]"
				align = nobaseline
				autoresize = yes
				parentanchor = hcenter
			}

			textbox = {
				background = {
					using = blurry_dark_background
					margin = { 10 5 }
					alpha = 0.4
				}

				tooltip = "IG_APPROVAL_BREAKDOWN"
				margin_right = 5
				visible = "[And(Not(EqualTo_int32(InterestGroup.GetApprovalValue,'(int32)0')),And(LessThan_int32(InterestGroup.GetApprovalValue,'(int32)5'),GreaterThan_int32(InterestGroup.GetApprovalValue,'(int32)-5')))]"
				text = "[InterestGroup.GetApprovalValue|=v]"
				align = nobaseline
				autoresize = yes
				parentanchor = hcenter
			}

			textbox = {
				background = {
					using = blurry_dark_background
					margin = { 10 5 }
					alpha = 0.4
				}

				tooltip = "IG_APPROVAL_BREAKDOWN"
				visible = "[EqualTo_int32(InterestGroup.GetApprovalValue,'(int32)0')]"
				text = "[InterestGroup.GetApprovalValue|=v]"
				align = nobaseline
				autoresize = yes
				parentanchor = hcenter
			}


			textbox = {

				background = {
					using = blurry_dark_background
					margin = { 10 5 }
					alpha = 0.4
				}

				tooltip = "IG_APPROVAL_BREAKDOWN"
				margin_right = 5
				visible = "[LessThanOrEqualTo_int32(InterestGroup.GetApprovalValue,'(int32)-5')]"
				text = "[InterestGroup.GetApprovalValue|n]"
				align = nobaseline
				autoresize = yes
				parentanchor = hcenter
			}
		}
	}

}

template cpm_ig_widget_button {
	block "sound" {
		using = select_button_sound
	}
	using = cpm_ig_button_properties
	texture = "gfx/interface/buttons/default_button_bg.dds"

	gfxtype = togglepushbuttongfx
	upframe = 1
	uphoverframe = 1
	uppressedframe = 1
	downframe = 2
	downhoverframe = 2
	downpressedframe = 2
	disableframe = 3

	spriteborder = { 7 7 }
	framesize = { 19 19 }

	### show
	state = {
		name = _show
		using = Animation_Curve_Default
		using = button_animation_duration
		modify_texture = {
			name = mouse_press
			alpha = 0
		}
		modify_texture = {
			name = mouse_enter
			alpha = 0
		}
		modify_texture = {
			name = "texture"
			translate_uv = { 0 0 }
			using = default_button_texture_alpha
		}
		modify_texture = {
			name = "wood_border"
			translate_uv = { 0 0 }
			using = default_button_texture_alpha
		}

		on_start = "[PdxGuiWidget.AccessChild('frame').TriggerAnimation('show')]"
		on_start = "[PdxGuiWidget.AccessChild('primary_dec').TriggerAnimation('show')]"
		on_start = "[PdxGuiWidget.AccessChild('bevel').TriggerAnimation('show')]"
		on_start = "[PdxGuiWidget.AccessChild('icon').TriggerAnimation('show')]"
	}

	### mouse enter
	state = {
		name = _mouse_enter
		using = Animation_Curve_Default
		using = button_animation_duration
		modify_texture = {
			name = mouse_press
			alpha = 0
		}
		modify_texture = {
			name = mouse_enter
			alpha = 0.5
		}
		modify_texture = {
			name = "texture"
			translate_uv = { 0 0 }
			using = default_button_texture_alpha
		}
		modify_texture = {
			name = "wood_border"
			translate_uv = { 0 0 }
			using = default_button_texture_alpha
		}

		on_start = "[PdxGuiWidget.AccessChild('frame').TriggerAnimation('mouse_enter')]"
		on_start = "[PdxGuiWidget.AccessChild('primary_dec').TriggerAnimation('mouse_enter')]"
		on_start = "[PdxGuiWidget.AccessChild('bevel').TriggerAnimation('mouse_enter')]"
		on_start = "[PdxGuiWidget.AccessChild('icon').TriggerAnimation('enter')]"
	}

	### mouse leave
	state = {
		name = _mouse_leave
		using = Animation_Curve_Default
		using = button_animation_duration_slow
		modify_texture = {
			name = mouse_press
			alpha = 0
		}
		modify_texture = {
			name = mouse_enter
			alpha = 0
		}
		modify_texture = {
			name = "texture"
			translate_uv = { 0 0 }
			using = default_button_texture_alpha
		}
		modify_texture = {
			name = "wood_border"
			translate_uv = { 0 0 }
			using = default_button_texture_alpha
		}

		on_start = "[PdxGuiWidget.AccessChild('frame').InterruptThenTriggerAnimation('mouse_enter','mouse_leave')]"
		on_start = "[PdxGuiWidget.AccessChild('primary_dec').InterruptThenTriggerAnimation('mouse_enter','mouse_leave')]"
		on_start = "[PdxGuiWidget.AccessChild('bevel').InterruptThenTriggerAnimation('mouse_enter','mouse_leave')]"
		on_start = "[PdxGuiWidget.AccessChild('icon').InterruptThenTriggerAnimation('enter','leave')]"
	}

	### mouse press
	state = {
		name = _mouse_press
		using = Animation_Curve_Default
		using = button_animation_duration
		modify_texture = {
			name = mouse_press
			alpha = 1
		}
		modify_texture = {
			name = mouse_enter
			alpha = 0
		}
		modify_texture = {
			name = "texture"
			translate_uv = { -0.005 -0.02 }
			using = default_button_texture_alpha
		}
		modify_texture = {
			name = "wood_border"
			translate_uv = { -0.005 -0.02 }
			using = default_button_texture_alpha
		}

		on_start = "[PdxGuiWidget.AccessChild('frame').TriggerAnimation('mouse_press')]"
		on_start = "[PdxGuiWidget.AccessChild('primary_dec').TriggerAnimation('mouse_press')]"
		on_start = "[PdxGuiWidget.AccessChild('bevel').TriggerAnimation('mouse_press')]"
		on_start = "[PdxGuiWidget.AccessChild('icon').TriggerAnimation('press')]"
	}

	### mouse release
	state = {
		name = _mouse_release
		using = Animation_Curve_Default
		using = button_animation_duration
		modify_texture = {
			name = mouse_press
			alpha = 0
		}
		modify_texture = {
			name = mouse_enter
			alpha = 0.3
		}
		modify_texture = {
			name = "texture"
			translate_uv = { 0 0 }
			using = default_button_texture_alpha
		}
		modify_texture = {
			name = "wood_border"
			translate_uv = { 0 0 }
			using = default_button_texture_alpha
		}

		on_start = "[PdxGuiWidget.AccessChild('frame').TriggerAnimation('mouse_release')]"
		on_start = "[PdxGuiWidget.AccessChild('primary_dec').TriggerAnimation('mouse_release')]"
		on_start = "[PdxGuiWidget.AccessChild('bevel').TriggerAnimation('mouse_release')]"
		on_start = "[PdxGuiWidget.AccessChild('icon').TriggerAnimation('release')]"
	}

	### bevel
	margin_widget = {
		name = "bevel"
		size = { 100% 100% }
		alpha = 0.7
		position = { 0 0 }

		block "bevel_margin" {
			margin = { 2 2 }
		}

		state = {
			name = show
			using = Animation_Curve_Default
			using = button_animation_duration
			alpha = 0.7
			position = { 0 0 }
		}
		state = {
			name = mouse_enter
			using = Animation_Curve_Default
			using = button_animation_duration
			alpha = 1
			position = { 0 0 }
		}
		state = {
			name = mouse_leave
			using = Animation_Curve_Default
			using = button_animation_duration
			alpha = 0.7
			position = { 0 0 }
		}
		state = {
			name = mouse_press
			using = Animation_Curve_Default
			using = button_animation_duration
			alpha = 0.2
			position = { 1 1 }
		}
		state = {
			name = mouse_release
			using = Animation_Curve_Default
			using = button_animation_duration
			alpha = 0.7
			position = { 0 0 }
		}

		icon = {
			size = { 100% 100% }
			block "bevel_texture" {
				texture = "gfx/interface/buttons/default_button_bevel.dds"
			}
			spriteType = Corneredtiled
			texture_density = 2
			spriteborder = { 75 35 }
		}
	}

	### primary decoration
	icon = {
		name = "primary_dec"
		block "primary_visible" {
			visible = no #only visible for primary buttons
		}
		block "primary_texture" {
			texture = "gfx/interface/buttons/default_button_frame_fancy_small.dds"
		}
		spriteborder = { 50 20 }
		spriteType = Corneredstretched
		size = { 100% 100% }
		texture_density = 2
		alwaystransparent = yes

		modify_texture = {
			name = "mouse_enter"
			texture = "gfx/interface/buttons/default_button_frame_mouse_enter.dds"
			spriteType = Corneredstretched
			spriteborder = { 0 0 }
			blend_mode = overlay
			alpha = 0
			translate_uv = { 0 1 }
		}

		state = {
			name = show
			using = Animation_Curve_Default
			using = button_animation_duration

			modify_texture = {
				name = "mouse_enter"
				alpha = 0
				translate_uv = { 0 1 }
			}
		}
		state = {
			name = mouse_enter
			using = Animation_Curve_Default
			using = button_animation_duration

			modify_texture = {
				name = "mouse_enter"
				alpha = 1
				translate_uv = { 0 0 }
			}
		}
		state = {
			name = mouse_leave
			using = Animation_Curve_Default
			using = button_animation_duration

			modify_texture = {
				name = "mouse_enter"
				alpha = 0
				translate_uv = { 0 1 }
			}
		}
		state = {
			name = mouse_press
			using = Animation_Curve_Default
			using = button_animation_duration

			modify_texture = {
				name = "mouse_enter"
				alpha = 0
				translate_uv = { 0 1 }
			}
		}
		state = {
			name = mouse_release
			using = Animation_Curve_Default
			using = button_animation_duration

			modify_texture = {
				name = "mouse_enter"
				alpha = 0
				translate_uv = { 0 1 }
			}
		}
	}

	### frame
	icon = {
		block "frame_visible" {
			visible = no #only used for action buttons
		}
		block "frame_texture" {
			texture = "gfx/interface/buttons/default_button_frame.dds"
		}
		spriteborder = { 12 12 }
		name = "frame"
		spriteType = Corneredstretched
		size = { 100% 100% }
		texture_density = 2
		alwaystransparent = yes

		modify_texture = {
			name = "mouse_enter"
			texture = "gfx/interface/buttons/default_button_frame_mouse_enter.dds"
			spriteType = Corneredstretched
			spriteborder = { 0 0 }
			blend_mode = overlay
			alpha = 0
			translate_uv = { 0 1 }
		}

		state = {
			name = show
			using = Animation_Curve_Default
			using = button_animation_duration

			modify_texture = {
				name = "mouse_enter"
				alpha = 0
				translate_uv = { 0 1 }
			}
		}
		state = {
			name = mouse_enter
			using = Animation_Curve_Default
			using = button_animation_duration

			modify_texture = {
				name = "mouse_enter"
				alpha = 1
				translate_uv = { 0 0 }
			}
		}
		state = {
			name = mouse_leave
			using = Animation_Curve_Default
			using = button_animation_duration

			modify_texture = {
				name = "mouse_enter"
				alpha = 0
				translate_uv = { 0 1 }
			}
		}
		state = {
			name = mouse_press
			using = Animation_Curve_Default
			using = button_animation_duration
			blockoverride "sound" {
				clicksound = "event:/SFX/DLC/1.3_ip1/UI/character_invite"
			}
			modify_texture = {
				name = "mouse_enter"
				alpha = 0
				translate_uv = { 0 1 }
			}
		}
		state = {
			name = mouse_release
			using = Animation_Curve_Default
			using = button_animation_duration

			modify_texture = {
				name = "mouse_enter"
				alpha = 0
				translate_uv = { 0 1 }
			}
		}
	}

	#Hack for the type "button_icon_square" which needs the animation triggers above
	block "hack_icon" {
		icon = {
			name = icon
			size = { 1 1 }
			texture = "gfx/interface/icons/generic_icons/transparent.dds"
			alwaystransparent = yes
		}
	}
}

template cpm_ig_button_properties {
	effectname = "NoHighlight"
	spriteType = Corneredtiled
	texture_density = 2

	modify_texture = {
		name = "bg_gradient"
		texture = "gfx/interface/buttons/default_button_bg_gradient.dds"
		spriteType = Corneredstretched
		spriteborder = { 0 0 }
		blend_mode = overlay
		alpha = 0.5
	}
	modify_texture = {
		name = "texture"
		texture = "gfx/interface/buttons/default_button_texture.dds"
		spriteType = Corneredtiled
		texture_density = 2
		spriteborder = { 0 0 }
		blend_mode = overlay
		translate_uv = { 0 0 }
		using = default_button_texture_alpha
	}
	modify_texture = {
		name = "wood_border"
		texture = "gfx/interface/buttons/default_button_wood_border.dds"
		spriteType = Corneredtiled
		texture_density = 2
		spriteborder = { 250 0 }
		blend_mode = overlay
		translate_uv = { 0 0 }
		using = default_button_texture_alpha
	}

	### animation textures
	modify_texture = {
		name = "mouse_enter"
		texture = "gfx/interface/buttons/white_button_mouseover.dds"
		spriteType = Corneredstretched
		spriteborder = { 0 0 }
		blend_mode = add
		alpha = 0
	}
	modify_texture = {
		name = "mouse_press"
		texture = "gfx/interface/buttons/default_button_mousepress.dds"
		spriteType = Corneredstretched
		spriteborder = { 0 0 }
		blend_mode = overlay
		alpha = 0
	}

	### disabled stripes
	using = disabled_stripes
}
