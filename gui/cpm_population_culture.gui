# COPY-PASTED FOR NOW
@panel_width_minus_10 = 530			# used to be 450
@panel_width = 540  				# used to be 460
@panel_width_half = 270				# used to be 230
@panel_width_plus_10 = 550  		# used to be 470
@panel_width_plus_14 = 554			# used to be 474
@panel_width_plus_14_half = 277		# used to be 237
@panel_width_plus_20 = 560			# used to be 480
@panel_width_plus_30 = 570			# used to be 490
@panel_width_plus_70 = 610			# used to be 530

@pop_type_table_row_height = 28
@pop_table_width = 355

types cpm_population_culture_types {

	type cpm_culture_table = flowcontainer {
		direction = vertical

		#header
		flowcontainer = {
			#widget = {
			#	size = { 120 @pop_type_table_row_height}
			#}


			widget = {
				size = { 148 @pop_type_table_row_height}
				sort_button = {
					visible = "[Not(GetVariableSystem.HasValue('cpm_culture_table_sort', 'c'))]"
					size = { 100% 100% }
					onclick = "[GetVariableSystem.Set('cpm_culture_table_sort', 'c')]"
					text = "[concept_culture]"
				}
				cpm_sort_button_pressed = {
					visible = "[GetVariableSystem.HasValue('cpm_culture_table_sort', 'c')]"
					size = { 100% 100% }
					text = "[concept_culture]"
				}
			}

			widget = {
				size = { 60 @pop_type_table_row_height}
				sort_button = {
					size = { 100% 100% }
					visible = "[And(GetVariableSystem.Exists('cpm_culture_table_sort'),Not(GetVariableSystem.HasValue('cpm_culture_table_sort', 'p')))]"
					onclick = "[GetVariableSystem.Set('cpm_culture_table_sort', 'p')]"
					tooltip = "POPULATION_TOOLTIP"
					button = {
						texture = "gfx/interface/buttons/sort_button_icons/sort_icon_population.dds"
						size = { 25 25 }
						parentanchor = center
						alwaystransparent = yes
					}
				}
				cpm_sort_button_pressed = {
					size = { 100% 100% }
					visible = "[Or(Not(GetVariableSystem.Exists('cpm_culture_table_sort')),GetVariableSystem.HasValue('cpm_culture_table_sort', 'p'))]"
					tooltip = "POPULATION_TOOLTIP"
					icon = {
						texture = "gfx/interface/buttons/sort_button_icons/sort_icon_population.dds"
						size = { 25 25 }
						parentanchor = center
						alwaystransparent = yes
					}
				}
			}

			widget = {
				size = { 60 @pop_type_table_row_height}

				sort_button = {
					size = { 100% 100% }
					visible = "[Not(GetVariableSystem.HasValue('cpm_culture_table_sort', 's'))]"
					onclick = "[GetVariableSystem.Set('cpm_culture_table_sort', 's')]"
					tooltip = "POLITICAL_STRENGTH_TITLE"
					button = {
						texture = "gfx/interface/buttons/sort_button_icons/sort_icon_political_strength.dds"
						size = { 25 25 }
						parentanchor = center
						alwaystransparent = yes
					}
				}

				cpm_sort_button_pressed = {
					size = { 100% 100% }
					visible = "[GetVariableSystem.HasValue('cpm_culture_table_sort', 's')]"
					tooltip = "POLITICAL_STRENGTH_TITLE"
					icon = {
						texture = "gfx/interface/buttons/sort_button_icons/sort_icon_political_strength.dds"
						size = { 25 25 }
						parentanchor = center
						alwaystransparent = yes
					}
				}

			}


			widget = {
				size = { 44 @pop_type_table_row_height}
				sort_button = {
					size = { 100% 100% }
					visible = "[Not(GetVariableSystem.HasValue('cpm_culture_table_sort', 'r'))]"
					tooltip = "MAJORITY_RELIGION_TITLE"
					onclick = "[GetVariableSystem.Set('cpm_culture_table_sort', 'r')]"
					button = {
						texture = "gfx/interface/buttons/sort_button_icons/sort_icon_religion.dds"
						size = { 25 25 }
						parentanchor = center
						alwaystransparent = yes
					}
				}
				cpm_sort_button_pressed = {
					size = { 100% 100% }
					visible = "[GetVariableSystem.HasValue('cpm_culture_table_sort', 'r')]"
					tooltip = "MAJORITY_RELIGION_TITLE"
					icon = {
						texture = "gfx/interface/buttons/sort_button_icons/sort_icon_religion.dds"
						size = { 25 25 }
						parentanchor = center
						alwaystransparent = yes
					}
				}
			}


			widget = {
				size = { 43 @pop_type_table_row_height}
				sort_button = {
					enabled = no
					size =  { 100% 100% }
					#onclick = "[Country.SortCultures('turmoil')]"
					tooltip = "TURMOIL_TITLE"
				}
				icon = {
					texture = "gfx/interface/buttons/sort_button_icons/sort_icon_turmoil.dds"
					size = { 25 25 }
					parentanchor = center
					alwaystransparent = yes
				}
			}




		}

		#small or expanded
		cpm_culture_table_content = {
			visible = "[Or(GetVariableSystem.Exists('cpm_culture_table_expand'),LessThan_int32(Add_int32(GetDataModelSize(Country.AccessPopCultures),Max_int32(Min_int32(GetDataModelSize(Country.AccessPopTypes),'(int32)15'),'(int32)12')),'(int32)28'))]"
		}

		#not small
		flowcontainer = {
			direction = vertical
			visible = "[GreaterThanOrEqualTo_int32(Add_int32(GetDataModelSize(Country.AccessPopCultures),Max_int32(Min_int32(GetDataModelSize(Country.AccessPopTypes),'(int32)15'),'(int32)12')),'(int32)28')]"

			#not expanded
			flowcontainer = {
				direction = vertical
				visible = "[Not(GetVariableSystem.Exists('cpm_culture_table_expand'))]"
				#professions >= 15 , cultures > 12 
				widget = {
					visible = "[And(GreaterThanOrEqualTo_int32(GetDataModelSize(Country.AccessPopTypes),'(int32)15'),GreaterThan_int32(GetDataModelSize(Country.AccessPopCultures),'(int32)12'))]"
					size = { @pop_table_width 308 }
					scissor = yes
					cpm_culture_table_content = {}
					# background = {
					# 	using = simple_frame
					# }
					#textbox = {
					#	parentanchor = center
					#	autoresize = yes
					#	text = "over 12 cultures"
					#}
				}
				#professions == 14 , cultures > 13 
				widget = {
					visible = "[And(EqualTo_int32(GetDataModelSize(Country.AccessPopTypes),'(int32)14'),GreaterThan_int32(GetDataModelSize(Country.AccessPopCultures),'(int32)13'))]"
					size = { @pop_table_width 336 }
					scissor = yes
					cpm_culture_table_content = {}
					#background = {
					#	using = simple_frame
					#}
					#textbox = {
					#	parentanchor = center
					#	autoresize = yes
					#	text = "over 13 cultures"
					#}
				}
				#professions == 13 , cultures > 14 
				widget = {
					visible = "[And(EqualTo_int32(GetDataModelSize(Country.AccessPopTypes),'(int32)13'),GreaterThan_int32(GetDataModelSize(Country.AccessPopCultures),'(int32)14'))]"
					size = { @pop_table_width 364 }
					scissor = yes
					cpm_culture_table_content = {}
					# background = {
					# 	using = simple_frame
					# }
					# textbox = {
					# 	parentanchor = center
					# 	autoresize = yes
					# 	text = "over 14 cultures"
					# }
				}
				#professions <= 12 , cultures > 15 
				widget = {
					visible = "[And(LessThanOrEqualTo_int32(GetDataModelSize(Country.AccessPopTypes),'(int32)12'),GreaterThan_int32(GetDataModelSize(Country.AccessPopCultures),'(int32)15'))]"
					size = { @pop_table_width 392 }
					scissor = yes
					cpm_culture_table_content = {}
					# background = {
					# 	using = simple_frame
					# }
					# textbox = {
					# 	parentanchor = center
					# 	autoresize = yes
					# 	text = "over 15 cultures"
					# }
				}

				button = {
					size = { @pop_table_width @pop_type_table_row_height }
					using = default_button
					text = "SHOW_MORE"
					onclick = "[GetVariableSystem.Toggle( 'cpm_culture_table_expand' )]"
				}
			}

			#expanded
			button = {
				visible =  "[GetVariableSystem.Exists('cpm_culture_table_expand')]"
				size = { @pop_table_width @pop_type_table_row_height }
				using = default_button
				text = "SHOW_LESS"
				onclick = "[GetVariableSystem.Toggle( 'cpm_culture_table_expand' )]"
			}


		}

	}

	type cpm_culture_table_content = flowcontainer {
		direction = vertical

		#population (default)
		dynamicgridbox = {
			visible = "[Or(Not(GetVariableSystem.Exists('cpm_culture_table_sort')),GetVariableSystem.HasValue('cpm_culture_table_sort', 'p'))]"
			datamodel = "[Country.AccessPopCulturesSortedByPopulation]"
			item = {
				cpm_culture_row = {}
			}
		}

		#pol str
		flowcontainer = {
			direction = vertical
			visible = "[GetVariableSystem.HasValue('cpm_culture_table_sort', 's')]"
			dynamicgridbox = {
				datamodel = "[Country.AccessPopCulturesSortedByPolStr]"
				item = {
					cpm_culture_row = {}
				}
			}
			dynamicgridbox = {
				datamodel = "[Country.AccessPopCulturesSortedByPopulation]"
				item = {
					cpm_culture_row = {
						visible = "[EqualTo_int64(Culture.GetPolStr(Country.Self),'(int64)0')]"
					}
				}
			}
		}

		#culture
		flowcontainer = {
			direction = vertical
			visible = "[GetVariableSystem.HasValue('cpm_culture_table_sort', 'c')]"

			dynamicgridbox = {
				datamodel = "[Country.AccessPopCulturesSortedByPopulation]"
				item = {
					cpm_culture_row = {
						visible = "[Culture.IsPrimaryCultureIn(Country.Self)]"
					}
				}
			}
			dynamicgridbox = {
				datamodel = "[Country.AccessPopCulturesSortedByPopulation]"
				item = {
					cpm_culture_row = {
						visible = "[Not(Or(Culture.IsPrimaryCultureIn(Country.Self),Culture.IsDiscriminatedIn(Country.Self)))]"
					}
				}
			}
			dynamicgridbox = {
				datamodel = "[Country.AccessPopCulturesSortedByPopulation]"
				item = {
					cpm_culture_row = {
						visible = "[Culture.IsDiscriminatedIn(Country.Self)]"
					}
				}
			}
		}

		#religion
		dynamicgridbox = {
			visible = "[GetVariableSystem.HasValue('cpm_culture_table_sort', 'r')]"
			datamodel = "[Country.AccessPopReligionsSortedByPopulation]"
			item = {
				dynamicgridbox = {
					datamodel = "[Country.AccessPopCulturesSortedByPopulation]"
					item = {
						cpm_culture_row = {
							visible = "[EqualTo_string(Culture.GetReligion.GetNameNoFormatting, Religion.GetNameNoFormatting)]"
						}
					}
				}
			}
		}
	}

	type cpm_culture_row = widget {
		size = { 355 @pop_type_table_row_height }

		parentanchor = top

		background = {
			margin_top = -1
			#margin_bottom = -1
			margin_right = -100
			visible = "[Culture.IsDiscriminatedIn(Country.Self)]"
			texture = "gfx/interface/tooltip/tooltip_title_bg.dds"
			color = { .42 .31 .28 1 }
			alpha = 0.4
		}
		background = {
			margin_top = -1
			#margin_bottom = -1
			margin_right = -100
			#visible = "[Not(Culture.IsDiscriminatedIn(Country.Self)))]"
			visible = "[Not(Or(Culture.IsDiscriminatedIn(Country.Self), Culture.IsPrimaryCultureIn(Country.Self)))]"
			texture = "gfx/interface/tooltip/tooltip_title_bg.dds"
			color = { .39 .46 .56 1 }
			alpha = 0.4
		}
		background = {
			margin_top = -1
			#margin_bottom = -1
			margin_right = -100
			visible = "[Culture.IsPrimaryCultureIn(Country.Self)]"
			texture = "gfx/interface/tooltip/tooltip_title_bg.dds"
			color = { .58 .52 .40 1 }
			alpha = 0.5
		}

		divider_clean = {
			#visible = no
			position = { 0 1 }
			size = { 98% 1 }
			parentanchor = bottom|hcenter
			alpha = 0.5
		}


		hbox = {
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding

			widget = {
				size = { @pop_type_table_row_height @pop_type_table_row_height }

				#tooltipwidget = {
				#	cpm_FancyTooltip_Culture_Piechart = {}
				#}	

				background = {
					using = simple_frame
				}

				icon = {
					parentanchor = center
					texture = "/gfx/interface/piechart/piechart_legend.dds"
					position = { 0.5 0.5 }
					size = { 25 25 }
					color = "[Culture.GetColor]"
				}
			}




			button = {
				size = { 120 @pop_type_table_row_height }
				using = glow_button
				onclick = "[InformationPanelBar.OpenCultureInfoPanel(Culture.AccessSelf)]"

				tooltipwidget = {
					cpm_FancyTooltip_Culture = {}
				}


				hbox = {
					#margin_left = 10
					widget = {
						#visible = no
						size = { 24 24 }

						icon = {
							visible = "[Culture.IsDiscriminatedIn(Country.Self)]"
							texture = "gfx/interface/icons/generic_icons/discriminated_icon.dds"
							size = { 20 20 }
							parentanchor = center
						}

						icon = {
							visible = "[Not(Culture.IsDiscriminatedIn(Country.Self))]"
							texture = "gfx/interface/icons/generic_icons/accepted_icon.dds"
							size = { 22 22 }
							parentanchor = center
						}



					}



					textbox = {
						size = { -1 -1 }
						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = expanding
						#parentanchor = left|vcenter
						align = nobaseline
						#margin_right = 10
						fontsize_min = 14
						default_format = "#tooltippable_name"
						text = "[Culture.GetNameNoFormatting]"

						elide = right
					}

				}


			}

			textbox = {
				size = { 60 @pop_type_table_row_height }
				tooltip = "CPM_CULTURE_POPULATION_TOOLTIP"
				margin_right = 8
				align = right|nobaseline
				text = "[Culture.GetPopulation(Country.Self)|d]"
			}

			widget = {
				size = { 60 @pop_type_table_row_height }

				textbox = {
					size = { 100% 100% }
					tooltip = "CPM_CULTURE_POL_STR_TOOLTIP"
					visible = "[GreaterThanOrEqualTo_CFixedPoint(Culture.GetPolStrAsPercentage(Country.Self),'(CFixedPoint)0.01')]"
					text = "[Culture.GetPolStrAsPercentage(Country.Self)|v/%d]"
					align = center|nobaseline
				}
				textbox = {
					visible = "[LessThan_CFixedPoint(Culture.GetPolStrAsPercentage(Country.Self),'(CFixedPoint)0.01')]"
					parentanchor = center
					align = center|nobaseline
					raw_text = "-"
					autoresize = yes
				}


			}

			widget = {
				size = { -1 @pop_type_table_row_height }
				layoutpolicy_horizontal = expanding

				background = {
					visible = no
					spriteType = Corneredstretched
					#margin = { 2 2 }
					spriteborder = { 0 0 }
					texture = "gfx/interface/backgrounds/rounded_bg.dds"
					#texture_density = 2


					modify_texture = {
						texture = "gfx/interface/backgrounds/default_bg_shading.dds"
						spriteType = Corneredstretched
						spriteborder = { 0 0 }
						blend_mode = multiply
						alpha = 0.5
					}

				}

				datacontext = "[Culture.GetReligion]"

				tooltipwidget = {
					cpm_FancyTooltip_Religion = {}
				}


				cpm_religion_icon = {
					parentanchor = center
					size = { 22 22 }
				}
			}


			textbox = {
				size = { -1 @pop_type_table_row_height }
				layoutpolicy_horizontal = expanding
				margin_right = 8

				align = right|nobaseline
				text = "[Culture.CalcTurmoilInCountry(Country.Self)|%0n]"


				tooltip = "CPM_CULTURE_TURMOIL_TOOLTIP"
			}


		}

	}


	type cpm_religion_button = 	button  {
		parentanchor = center
		size = { 30 28 }
		datacontext =  "[Culture.GetReligion]"
		using = default_button

		tooltipwidget = {
			cpm_FancyTooltip_Religion = {
			}
		}

		cpm_religion_icon = {
			parentanchor = center
		}



	}

	type cpm_religion_icon = widget {
		size = { 22 22 }

		icon = {
			parentanchor = center
			size = { 100% 100% }
			position = { 2 2 }
			texture = "[Religion.GetTexture]"
			alpha = 0.6
			modify_texture = {
				spriteType = Corneredstretched
				spriteborder = { 0 0 }
				texture = "gfx/interface/icons/generic_icons/black_box.dds"
				blend_mode = normal
				#alpha = 0.2
			}
		}



		icon = {
			#visible = no
			parentanchor = center
			size = { 100% 100% }
			texture = "[Religion.GetTexture]"

			modify_texture = {
				spriteType = Corneredstretched
				spriteborder = { 0 0 }
				texture = "gfx/interface/backgrounds/white.dds"
				blend_mode = normal
				color = "[Religion.GetColor]"
				#alpha = 0.2
			}

			modify_texture = {
				texture = "gfx/interface/buttons/default_button_texture.dds"
				spriteType = Corneredtiled
				texture_density = 2
				spriteborder = { 0 0 }
				blend_mode = overlay
				alpha = 2
			}


			modify_texture = {
				texture = "gfx/interface/backgrounds/default_bg_shading.dds"
				spriteType = Corneredstretched
				spriteborder = { 0 0 }
				blend_mode = add
				#alpha = 1.2
			}

		}

		icon = {
			#visible = no
			parentanchor = center
			size = { 100% 100% }
			texture = "[Religion.GetTexture]"
			alpha = 0.1

			modify_texture = {
				spriteType = Corneredstretched
				spriteborder = { 0 0 }
				texture = "gfx/interface/backgrounds/white.dds"
				blend_mode = normal
				color = { 0.7 0.7 0.7 1}
				alpha = 1
			}

			#modify_texture = {
			#	texture = "gfx/interface/buttons/default_button_texture.dds"
			#	spriteType = Corneredtiled
			#	texture_density = 2
			#	spriteborder = { 0 0 }
			#	blend_mode = overlay
			#	alpha = 2
			#}

			modify_texture = {
				using = texture_velvet
				alpha = 5
			}

		}

		icon = {
			#visible = no
			parentanchor = center
			size = { 100% 100% }
			texture = "[Religion.GetTexture]"
			alpha = 0.4

		}

	}



	type cpm_culture_smallchart = cpm_smallchart {
		blockoverride "datamodel" {
			datamodel = "[Country.AccessPopCulturesSortedByPopulation]"
		}

		blockoverride "heading" {
			text = "[concept_culture]"
		}

		blockoverride "tooltip" {
			tooltipwidget = {
				cpm_FancyTooltip_Culture_Piechart = {}
			}
		}
		

		blockoverride "pieslice" {
			value = "[Culture.GetPopulationAsFloat(Country.Self)]"
		}

		blockoverride "color" {
			color = "[Culture.GetColor]"
		}

		blockoverride "pie_item_goto_button" {
			button = {
				using = clean_button
				size = { 100% 100% }
				onclick = "[InformationPanelBar.OpenCultureInfoPanel(Culture.AccessSelf)]"
			}
		}
	}

	type cpm_culture_pol_str_smallchart = cpm_smallchart {
		blockoverride "datamodel" {
			datamodel = "[Country.AccessPopCulturesSortedByPolStr]"
		}

		blockoverride "heading" {
			text = "POLITICAL_STRENGTH_PIECHART_HEADER"
		}

		blockoverride "tooltip" {
			tooltipwidget = {
				cpm_FancyTooltip_Culture_Piechart = {}
			}
		}

		blockoverride "pieslice" {
			value = "[Culture.GetPolStrAsFloat(Country.Self)]"
		}

		blockoverride "color" {
			color = "[Culture.GetColor]"
		}

		blockoverride "pie_item_goto_button" {
			button = {
				using = clean_button
				size = { 100% 100% }
				onclick = "[InformationPanelBar.OpenCultureInfoPanel(Culture.AccessSelf)]"
			}
		}
	}




	type cpm_religion_smallchart = cpm_smallchart {
		blockoverride "datamodel" {
			datamodel = "[Country.AccessPopReligionsSortedByPopulation]"
		}

		blockoverride "heading" {
			text = "[concept_religion]"
		}

		blockoverride "tooltip" {
			tooltipwidget = {
				cpm_FancyTooltip_Religion_Piechart = {}
			}
		}

		blockoverride "pieslice" {
			value = "[Religion.GetPopulationAsFloat(Country.Self)]"
		}

		blockoverride "color" {
			color = "[Religion.GetColor]"
		}

		blockoverride "pie_item_goto_button" {
			button = {
				using = clean_button
				size = { 100% 100% }
				onclick = "[InformationPanelBar.OpenReligionInfoPanel(Religion.AccessSelf)]"
			}
		}

	}

	type cpm_religion_pol_str_smallchart = cpm_smallchart {
		blockoverride "datamodel" {
			datamodel = "[Country.AccessPopReligionsSortedByPolStr]"
		}

		blockoverride "heading" {
			text = "POLITICAL_STRENGTH_PIECHART_HEADER"
		}

		blockoverride "tooltip" {
			tooltipwidget = {
				cpm_FancyTooltip_Religion_Piechart = {}
			}
		}

		blockoverride "pieslice" {
			value = "[Religion.GetPolStrAsFloat(Country.Self)]"
		}

		blockoverride "color" {
			color = "[Religion.GetColor]"
		}

		blockoverride "pie_item_goto_button" {
			button = {
				using = clean_button
				size = { 100% 100% }
				onclick = "[InformationPanelBar.OpenReligionInfoPanel(Religion.AccessSelf)]"
			}
		}

	}


	type cpm_FancyTooltip_Culture = FancyTooltipWidgetType {
		blockoverride "text" {
			text = "CPM_DATA_CULTURE_NAME_TOOLTIP"
		}

		blockoverride "name" {
			text = "[Culture.GetNameNoFormatting]"
		}

		blockoverride "type" {
			text = "TOOLTIP_TYPE_CULTURE"
		}

		blockoverride "color" {
			color = "[Culture.GetColor]"
		}

	}

	type cpm_FancyTooltip_Culture_Piechart = cpm_FancyTooltipWidgetTypeNoType {
		blockoverride "text" {
			text = "CPM_CULTURE_POPULATION_PIECHART"
		}

		blockoverride "name" {
			text = "CPM_CULTURE_IN_COUNTRY"
		}

		blockoverride "type" {
			#text = "TOOLTIP_TYPE_CULTURE"
		}

		blockoverride "color" {
			color = "[Culture.GetColor]"
		}

		blockoverride "replace_icon" {
			icon = {
				visible = "[Not(Culture.IsDiscriminatedIn(Country.Self))]"
				block "icon_texture" {
					texture = "gfx/interface/icons/generic_icons/accepted_icon.dds"
				}
				block "icon_size" {
					size = { 45 45 }
				}
				parentanchor = center
			}
			icon = {
				visible = "[Culture.IsDiscriminatedIn(Country.Self)]"
				block "icon_texture" {
					texture = "gfx/interface/icons/generic_icons/discriminated_icon.dds"
				}
				block "icon_size" {
					size = { 45 45 }
				}
				parentanchor = center
			}

		}
	}
		

	type cpm_FancyTooltip_Religion = FancyTooltipWidgetType {
		blockoverride "text" {
			text = "CPM_DATA_RELIGION_NAME_TOOLTIP"
		}

		blockoverride "name" {
			text = "[Religion.GetNameNoFormatting]"
		}

		blockoverride "type" {
			text = "TOOLTIP_TYPE_RELIGION"
		}

		blockoverride "color" {
			color = "[Religion.GetColor]"
		}

		blockoverride "icon_texture" {
			texture = "[Religion.GetTexture]"
		}
	}

	type cpm_FancyTooltip_Religion_Piechart = cpm_FancyTooltipWidgetTypeNoType {
		blockoverride "text" {
			text = "CPM_RELIGION_POPULATION_PIECHART"
		}

		blockoverride "name" {
			text = "CPM_RELIGION_IN_COUNTRY"
		}

		blockoverride "type" {
		}

		blockoverride "color" {
			color = "[Religion.GetColor]"
		}

		blockoverride "icon_texture" {
			texture = "[Religion.GetTexture]"
		}
	}

}