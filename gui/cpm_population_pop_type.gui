# COPY-PASTED FOR NOW
@panel_width_minus_10 = 530			# used to be 450
@panel_width = 540  				# used to be 460
@panel_width_half = 270				# used to be 230
@panel_width_plus_10 = 550  		# used to be 470
@panel_width_plus_14 = 554			# used to be 474
@panel_width_plus_14_half = 277		# used to be 237
@panel_width_plus_20 = 560			# used to be 480 
@panel_width_plus_30 = 570			# used to be 490
@panel_width_plus_70 = 610			# used to be 530

@pop_type_table_row_height = 28

types cpm_population_pop_type_types {

	#MINIMIZED CHART SECTION
	type cpm_pop_type_piechart = chart {
		blockoverride "datamodel" {
			datamodel = "[Country.AccessPopTypesSortedOnPopulation]"
		}

		blockoverride "show_more_button_visibility" {
			visible = "[GreaterThan_int32(GetDataModelSize(Country.AccessPopTypesSortedOnPopulation), '(int32)3')]"
		}

		blockoverride "heading" {
			text = "[concept_profession]"
		}

		blockoverride "tooltip" {
			tooltip = "CPM_POP_TYPE_POPULATION_TOOLTIP"
		}

		blockoverride "pieslice" {
			value = "[PopType.GetPopulationAsFloat(Country.Self)]"
		}

		blockoverride "color" {
			color = "[PopType.GetColor]"
		}

		blockoverride "leftside_info" {
			default_format = "#tooltippable_name"
			text = "[PopType.GetNameNoFormatting]"
			tooltipwidget = {
				cpm_FancyTooltip_PopType = {
				}
			}
		}

		blockoverride "rightside1_info" {
			text = "[PopType.GetPopulationAsPercentage(Country.Self)|v/%d]"
		}

		blockoverride "rightside2_info" {
			raw_text = "([PopType.GetPopulation(Country.Self)|D])"
		}

		blockoverride "maxverticalslots" {
			maxverticalslots = 3
		}
	}

	type cpm_pop_type_pol_str_piechart = chart {
		blockoverride "datamodel" {
			datamodel = "[Country.AccessPopTypesSortedOnPolStr]"
		}

		blockoverride "show_more_button_visibility" {
			visible = "[GreaterThan_int32(GetDataModelSize(Country.AccessPopTypesSortedOnPolStr), '(int32)3')]"
		}

		blockoverride "heading" {
			text = "POLITICAL_STRENGTH_PIECHART_HEADER"
		}

		blockoverride "tooltip" {
			tooltip = "CPM_POP_TYPE_POL_STR_TOOLTIP"
		}

		blockoverride "pieslice" {
			value = "[PopType.GetPolStrAsFloat(Country.Self)]"
		}

		blockoverride "color" {
			color = "[PopType.GetColor]"
		}

		blockoverride "leftside_info" {
			default_format = "#tooltippable_name"
			text = "[PopType.GetNameNoFormatting]"
			tooltipwidget = {
				cpm_FancyTooltip_PopType = {
				}
			}
		}

		blockoverride "rightside1_info" {
			text = "[PopType.GetPolStrAsPercentage(Country.Self)|v/%d]"
		}

		blockoverride "rightside2_info" {
			raw_text = "([PopType.GetPolStr(Country.Self)|K])"
		}

		blockoverride "maxverticalslots" {
			maxverticalslots = 3
		}
	}


	#POP TYPE CHARTS
	type cpm_pop_type_smallchart = cpm_smallchart {
		blockoverride "datamodel" {
			datamodel = "[Country.AccessPopTypesSortedOnPopulation]"
		}

		blockoverride "show_more_button_visibility" {
			visible = "[GreaterThan_int32(GetDataModelSize(Country.AccessPopTypesSortedOnPopulation), '(int32)3')]"
		}

		blockoverride "heading" {
			text = "[concept_profession]"
		}

		blockoverride "tooltip" {
			tooltipwidget = {
				cpm_FancyTooltip_PopType_Piechart = {}
			}
		}

		blockoverride "pieslice" {
			value = "[PopType.GetPopulationAsFloat(Country.Self)]"
		}

		blockoverride "color" {
			color = "[PopType.GetColor]"
		}
	}

	type cpm_pop_type_pol_str_smallchart = cpm_smallchart {
		blockoverride "datamodel" {
			datamodel = "[Country.AccessPopTypesSortedOnPolStr]"
		}

		blockoverride "show_more_button_visibility" {
			visible = "[GreaterThan_int32(GetDataModelSize(Country.AccessPopTypesSortedOnPolStr), '(int32)3')]"
		}

		blockoverride "heading" {
			text = "POLITICAL_STRENGTH_PIECHART_HEADER"
		}

		blockoverride "tooltip" {
			tooltipwidget = {
				cpm_FancyTooltip_PopType_Piechart = {}
			}
		}

		blockoverride "pieslice" {
			value = "[PopType.GetPolStrAsFloat(Country.Self)]"
		}

		blockoverride "color" {
			color = "[PopType.GetColor]"
		}
	}

	#POP TYPE TABLE
	type cpm_pop_type_table = flowcontainer {
		direction = vertical

		flowcontainer = {
			widget = {
				size = { 148 @pop_type_table_row_height}
				sort_button = {
					visible = "[Not(GetVariableSystem.HasValue('cpm_pop_type_table_sort', 't' ))]"
					size = { 100% 100% }
					onclick = "[GetVariableSystem.Set('cpm_pop_type_table_sort', 't' )]"
					text = "[concept_profession]"
				}

				cpm_sort_button_pressed = {
					visible = "[GetVariableSystem.HasValue('cpm_pop_type_table_sort', 't' )]"
					size = { 100% 100% }
					text = "[concept_profession]"
				}

			}

			widget = {
				size = { 60 @pop_type_table_row_height}

				sort_button = {
					size = { 100% 100% }
					visible = "[Not(GetVariableSystem.HasValue('cpm_pop_type_table_sort', 'p' ))]"

					onclick = "[GetVariableSystem.Set('cpm_pop_type_table_sort', 'p' )]"
					tooltip = "POPULATION_TOOLTIP"
					button = {
						texture = "gfx/interface/buttons/sort_button_icons/sort_icon_population.dds"
						size = { 25 25 }
						parentanchor = center
						alwaystransparent = yes
					}
				}

				cpm_sort_button_pressed = {
					size = { 100% 100% }
					visible = "[GetVariableSystem.HasValue('cpm_pop_type_table_sort', 'p' )]"

					tooltip = "POPULATION_TOOLTIP"
					icon = {
						texture = "gfx/interface/buttons/sort_button_icons/sort_icon_population.dds"
						size = { 25 25 }
						parentanchor = center
						alwaystransparent = yes
					}
				}
			}

			widget = {
				size = { 60 @pop_type_table_row_height}

				sort_button = {
					size = { 100% 100% }
					visible = "[And(GetVariableSystem.Exists('cpm_pop_type_table_sort'),Not(GetVariableSystem.HasValue('cpm_pop_type_table_sort', 's' )))]"
					onclick = "[GetVariableSystem.Set('cpm_pop_type_table_sort', 's' )]"
					tooltip = "POLITICAL_STRENGTH_TITLE"
					button = {
						texture = "gfx/interface/buttons/sort_button_icons/sort_icon_political_strength.dds"
						size = { 25 25 }
						parentanchor = center
						alwaystransparent = yes
					}
				}

				cpm_sort_button_pressed = {
					size = { 100% 100% }
					visible = "[Or(GetVariableSystem.HasValue('cpm_pop_type_table_sort', 's'),Not(GetVariableSystem.Exists('cpm_pop_type_table_sort')))]"
					tooltip = "POLITICAL_STRENGTH_TITLE"
					icon = {
						texture = "gfx/interface/buttons/sort_button_icons/sort_icon_political_strength.dds"
						size = { 25 25 }
						parentanchor = center
						alwaystransparent = yes
					}
				}


			}

			widget = {
				size = { 87 @pop_type_table_row_height}
				cpm_sort_button = {
					size = { 100% 100% }
					enabled = no
					text = "CPM_RADICALISM_HEADER"
					#tooltip = "CPM_LOYALISTS_AND_RADICALS"
				}
				icon = {
					visible = no
					position = { 0 1 }
					size = { 26 26 }
					parentanchor = center
					alwaystransparent = yes
					texture = "gfx/interface/buttons/sort_button_icons/sort_icon_radicalism.dds"
				}

			}


		}

		flowcontainer = {
			direction = vertical
			visible = "[GetVariableSystem.HasValue('cpm_pop_type_table_sort', 't')]"
			dynamicgridbox = {
				datamodel = "[CountryPanel.AccessCountry.AccessPopTypesSortedOnPolStr]"
				item = {
					cpm_pop_type_row = {
						visible = "[EqualTo_string(PopType.GetStrata,Localize('rich'))]"
					}
				}
			}
			dynamicgridbox = {
				datamodel = "[CountryPanel.AccessCountry.AccessPopTypesSortedOnPolStr]"
				item = {
					cpm_pop_type_row = {
						visible = "[EqualTo_string(PopType.GetStrata,Localize('middle'))]"
					}
				}
			}
			dynamicgridbox = {
				datamodel = "[CountryPanel.AccessCountry.AccessPopTypesSortedOnPolStr]"
				item = {
					cpm_pop_type_row = {
						visible = "[EqualTo_string(PopType.GetStrata,Localize('poor'))]"
					}
				}
			}
		}

		dynamicgridbox = {
			visible = "[GetVariableSystem.HasValue('cpm_pop_type_table_sort', 'p')]"
			datamodel = "[CountryPanel.AccessCountry.AccessPopTypesSortedOnPopulation]"
			item = {
				cpm_pop_type_row = {}
			}
		}

		dynamicgridbox = {
			visible = "[Or(GetVariableSystem.HasValue('cpm_pop_type_table_sort', 's'),Not(GetVariableSystem.Exists('cpm_pop_type_table_sort')))]"
			datamodel = "[CountryPanel.AccessCountry.AccessPopTypesSortedOnPolStr]"
			item = {
				cpm_pop_type_row = {}
			}
		}

	}


	type cpm_pop_type_row = widget {
		size = { 355 @pop_type_table_row_height }

		parentanchor = top

		divider_clean = {
			#visible = no
			position = { 0 1 }
			size = { 98% 1 }
			parentanchor = bottom|hcenter
			alpha = 0.5
		}



		background = {
			margin_top = -1
			#margin_bottom = -1
			margin_right = -100
			visible = "[EqualTo_string(PopType.GetStrata,Localize('poor'))]"
			texture = "gfx/interface/tooltip/tooltip_title_bg.dds"
			color = { .42 .31 .28 1 }
			alpha = 0.4
		}
		background = {
			margin_top = -1
			#margin_bottom = -1
			margin_right = -100
			visible = "[EqualTo_string(PopType.GetStrata,Localize('middle'))]"
			texture = "gfx/interface/tooltip/tooltip_title_bg.dds"
			color = { .39 .46 .56 1 }
			alpha = 0.4
		}
		background = {
			margin_top = -1
			#margin_bottom = -1
			margin_right = -100
			visible = "[EqualTo_string(PopType.GetStrata,Localize('rich'))]"
			texture = "gfx/interface/tooltip/tooltip_title_bg.dds"
			color = { .58 .52 .40 1 }
			alpha = 0.5
		}

		hbox = {

			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding

			widget = {
				size = { @pop_type_table_row_height @pop_type_table_row_height }

				#tooltipwidget = {
				#	cpm_FancyTooltip_PopType_Piechart = {}
				#}

				background = {
					using = simple_frame
				}

				icon = {
					parentanchor = center
					texture = "/gfx/interface/piechart/piechart_legend.dds"
					position = { 0.5 0.5 }
					size = { 25 25 }
					color = "[PopType.GetColor]"
				}
			}




			widget = {
				size = { 120 @pop_type_table_row_height }
				background = {
					#using = entry_bg_simple
				}

				textbox = {
					parentanchor = left|vcenter
					align = nobaseline
					position = { 6 0 }
					default_format = "#tooltippable_name"
					text = "[PopType.GetNameNoFormatting]"

					size = { 100% 100%}
					elide = right
					tooltipwidget = {
						cpm_FancyTooltip_PopType = {
						}
					}
				}

			}

			widget = {
				size = { 60 @pop_type_table_row_height }
				background = {
					#using = entry_bg_simple
				}
				tooltip = "CPM_POP_TYPE_POPULATION_TOOLTIP"

				textbox = {
					#visible = "[Not(GetVariableSystem.HasValue('cpm_pop_type_table_sort', 'p'))]"
					margin_right = 8
					parentanchor = left
					align = right|nobaseline
					text = "[PopType.GetPopulation(Country.Self)|d]"
					size = { 100% 100% }
				}
				textbox = {
					visible = no
					#visible = "[GetVariableSystem.HasValue('cpm_pop_type_table_sort', 'p')]"
					margin_right = 8
					parentanchor = left
					align = right|nobaseline
					text = "[PopType.GetPopulation(Country.Self)|vd]"
					size = { 100% 100% }
				}

			}


			widget = {
				size = { 60 @pop_type_table_row_height }
				background = {
					#using = entry_bg_simple
				}
				widget = {
					visible = "[GreaterThan_int64(PopType.GetPolStr(Country.Self),'(int64)0')))]"
					size = { 100% 100% }
					tooltip = "CPM_POP_TYPE_POL_STR_TOOLTIP"
					textbox = {
						#visible = "[Not(GetVariableSystem.HasValue('cpm_pop_type_table_sort', 'p'))]"
						parentanchor = left
						align = center|nobaseline
						text = "[PopType.GetPolStrAsPercentage(Country.Self)|v%d]"
						size = { 100% 100% }
					}
					textbox = {
						visible = no
						#visible = "[GetVariableSystem.HasValue('cpm_pop_type_table_sort', 'p')]"
						parentanchor = left
						align = center|nobaseline
						text = "[PopType.GetPolStrAsPercentage(Country.Self)|%d]"
						size = { 100% 100% }
					}

				}
				textbox = {
					visible = "[EqualTo_int64(PopType.GetPolStr(Country.Self),'(int64)0')))]"
					parentanchor = center
					align = center|nobaseline
					raw_text = "-"
					autoresize = yes
				}

			}

			widget = {
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding
				tooltip = "CPM_POP_TYPE_RADICALISM_TOOLTIP"
				cpm_radicalism_progressbar = {
					margin_left = 4
					margin_right = 4
					margin_top = 5
					margin_bottom = 6
					size = { 100% 100% }

					blockoverride "value_left" {
						min = 0
						max = 100
						value = "[CurrentAndMaxToProgressbarValueInt32(FixedPointToInt(IntToFixedPoint(PopType.GetRadicals(CountryPanel.AccessCountry.Self))),FixedPointToInt(IntToFixedPoint(PopType.GetPopulation(CountryPanel.AccessCountry.Self))))]"
					}
					blockoverride "value_right" {
						min = 0
						max = 1
						value = "[Subtract_float('(float)1', FixedPointToFloat(Country.MakeScope.Var(Concatenate('cpm_',PopType.GetNameNoIconNoFormatting)).GetValue))]"
					}
				}

			}
		}
	}

	type cpm_radicalism_progressbar = margin_widget {
		size = { 300 40 }


		### progressbar left
		widget = {

			size = { 100% 100% }

			background = {
				texture = "gfx/interface/progressbar/progressbar_empty.dds"
				spriteType = Corneredtiled
				spriteborder = { 4 4 }
				texture_density = 2

				using = progressbar_texture_properties
			}


			scissor = yes

			progressbar = {
				### REVERSE HACK

				block "negative_textures" {
					progresstexture = "gfx/interface/progressbar/progressbar_bad.dds"
					noprogresstexture = "gfx/interface/icons/generic_icons/transparent.dds"
				}

				size = { 100% 100% }
				spriteType = Corneredtiled
				spriteborder = { 4 4 }
				texture_density = 2
				skip_initial_animation = yes

				block "negative_min_max_values" {
					min = -1
					max = 0
				}

				block "value_left" {}

				blockoverride "glow" {
					texture = "gfx/interface/icons/generic_icons/transparent.dds"
				}
				blockoverride "glow_line" {
					texture = "gfx/interface/icons/generic_icons/transparent.dds"
				}


				direction = horizontal
				using = progressbar_texture_properties
			}
		}

		### progressbar right
		widget = {

			size = { 100% 100% }
			parentanchor = right
			scissor = yes

			progressbar = {

				block "positive_textures" {
					progresstexture = "gfx/interface/icons/generic_icons/transparent.dds"
					noprogresstexture = "gfx/interface/progressbar/progressbar_green.dds"
				}

				size = { 100% 100% }
				spriteType = Corneredtiled
				spriteborder = { 4 4 }
				texture_density = 2
				skip_initial_animation = yes

				block "positive_min_max_values" {
					min = 0
					max = 1
				}

				block "value_right" {}

				direction = horizontal

				using = progressbar_marker_indicator

				blockoverride "glow" {
					texture = "gfx/interface/icons/generic_icons/transparent.dds"
				}
				blockoverride "glow_line" {
					texture = "gfx/interface/icons/generic_icons/transparent.dds"
				}

				using = progressbar_texture_properties
			}
		}

		### frame
		widget = {

			size = { 100% 100% }

			background = {
				name = "frame"
				texture = "gfx/interface/progressbar/progressbar_frame.dds"
				spriteType = Corneredstretched
				spriteborder = { 6 6 }
				texture_density = 2
				margin = { 3 3 }
			}
		}
	}

	type cpm_FancyTooltip_PopType = FancyTooltipWidgetType {
		blockoverride "text" {
			text = "CPM_POP_TYPE_NAME_TOOLTIP"
		}

		blockoverride "icon_texture" {
			texture = "[PopType.GetTexture]"
		}

		blockoverride "name" {
			text = "[PopType.GetNameNoIcon]"
		}

		blockoverride "type" {
			text = "TOOLTIP_TYPE_PROFESSION"
		}

		blockoverride "color" {
			color = "[PopType.GetColor]"
		}
	}

	type cpm_FancyTooltip_PopType_Piechart = cpm_FancyTooltipWidgetTypeNoType {
		blockoverride "text" {
			text = "CPM_POP_TYPE_POPULATION_PIECHART"
		}

		blockoverride "icon_texture" {
			texture = "[PopType.GetTexture]"
		}

		blockoverride "name" {
			text = "CPM_POP_TYPE_IN_COUNTRY_NO_ICON"
		}

		blockoverride "type" {
			text = "TOOLTIP_TYPE_PROFESSION"
		}

		blockoverride "color" {
			color = "[PopType.GetColor]"
		}
	}



}